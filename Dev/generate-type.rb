typeName = ARGV[0] # protocol name like "FooExpr"
kind = ARGV[1] # expr/stmt/decl

syntaxName = "#{typeName}Syntax"
analyzedName = "Analyzed#{typeName}"

subdir = {
	"expr" => "Exprs",
	"stmt" => "Stmts",
	"decl" => "Decls"
}[kind] || abort("Unknown kind: #{kind}")

conformsTo = {
	"expr" => "Expr",
	"stmt" => "Stmt",
	"decl" => "Decl"
}[kind]

def write(path, contents)
	if File.exists?(path)
		abort("File already exists: #{path}")
	end

	File.open(path, "w+")	do |file|
		file.puts(path)
	end
end

syntaxPath = "Sources/TalkTalkSyntax/#{subdir}/#{typeName}.swift"
syntaxFile = <<~SWIFT
// Generated by Dev/generate-type.rb #{Time.now.strftime("%m/%d/%Y %H:%M")}

public protocol #{typeName}: #{conformsTo} {
	// Insert #{typeName} specific fields here
}

public struct #{typeName}Syntax: #{typeName} {
	// Where does this syntax live
	var location: SourceLocation

	// Useful for just traversing the whole tree
	var children: [any Syntax]

	// Let this node be visited by visitors
	func accept<V: Visitor>(_ visitor: V, _ context: V.Context) throws -> V.Value {
		try visitor.visit(self, context: context)
	}
}
SWIFT

analyzedPath = "Sources/TalkTalkAnalysis/#{subdir}/Analyzed#{typeName}.swift"
analyzedFile = <<~SWIFT
// Generated by Dev/generate-type.rb #{Time.now.strftime("%m/%d/%Y %H:%M")}

import TalkTalkSyntax

public struct #{analyzedName}: #{typeName}, Analyzed#{kind} {
	let wrapped: any #{typeName}

	public var typeID: TypeID
	public var analyzedChildren: [any AnalyzedSyntax] { fatalError("TODO") }

	// Delegate these to the wrapped node
	public var expr: any Expr { wrapped.expr }
	public var location: SourceLocation { wrapped.location }
	public var children: [any Syntax] { wrapped.children }

	func accept<V>(_ visitor: V, _ scope: V.Context) throws -> V.Value where V: AnalyzedVisitor {
		try visitor.visit(self, scope)
	}

	func accept<V: Visitor>(_ visitor: V, _ context: V.Context) throws -> V.Value {
		try visitor.visit(self, context: context)
	}
}
SWIFT

visitorRequirement = <<~SWIFT
	func visit(_ expr: #{typeName}, _ context: Context) throws -> Value
SWIFT

analysisVisitorRequirement = <<~SWIFT
	func visit(_ expr: Analyzed#{typeName}, _ context: Context) throws -> Value
SWIFT

puts "#{typeName}"
puts "#{syntaxPath} ---"
puts syntaxFile
puts "#{analyzedPath} ---"
puts analyzedFile
