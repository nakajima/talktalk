protocol Greetable {
	var name: String
}

protocol Greeter {
	func greet(greetable: Greetable) -> String
}

struct Person: Greeter, Greetable {
	var name: String

	func greet(greetable: Greetable) -> String {
		"Oh hi, \(greetable.name)"
	}
}

struct Animal: Greetable {
	var name: String
}

let count = 100
var greetings: Array<String> = []

var j = 0
	while j < count {
	// TODO: it's be nice to infer array types based on first use?
	var people = [Person("Pat")]
	var animals  = [Animal("Pooch")]

	var i = 0
	while i < count {
		i = i + 1
		people.append(Person(name: "Person \(i)"))
		animals.append(Animal(name: "Animal \(i)"))
	}

	i = 0
	while i < count {
		let person = people[i]
		let animal = animals[i]
		greetings.append(person.greet(name: animal))
		i = i + 1
	}

	j += 1
}
