// Generated by Dev/generate-type.rb 09/17/2024 09:50

import TalkTalkBytecode
import TalkTalkSyntax

public struct AnalyzedForStmt: ForStmt, AnalyzedStmt {
	public let wrapped: ForStmtSyntax
	public var elementAnalyzed: any AnalyzedSyntax
	public var sequenceAnalyzed: any AnalyzedExpr
	public var bodyAnalyzed: AnalyzedBlockStmt
	public var iteratorSymbol: Symbol

	public var inferenceType: InferenceType
	public var environment: Environment
	public var analyzedChildren: [any AnalyzedSyntax] { [] }

	// Delegate these to the wrapped node
	public var location: SourceLocation { wrapped.location }
	public var children: [any Syntax] { wrapped.children }

	public func accept<V>(_ visitor: V, _ scope: V.Context) throws -> V.Value where V: AnalyzedVisitor {
		try visitor.visit(self, scope)
	}

	public func accept<V: Visitor>(_ visitor: V, _ context: V.Context) throws -> V.Value {
		try visitor.visit(wrapped, context)
	}
}
