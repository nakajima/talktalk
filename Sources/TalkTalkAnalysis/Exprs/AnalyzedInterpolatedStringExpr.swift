// Generated by Dev/generate-type.rb 09/12/2024 20:43

import TalkTalkSyntax

public enum AnalyzedInterpolatedStringSegment: Equatable, CustomStringConvertible {
	public struct AnalyzedInterpolatedExpr: Equatable {
		public static func ==(lhs: Self, rhs: Self) -> Bool {
			lhs.exprAnalyzed.id == rhs.exprAnalyzed.id
		}

		public let exprAnalyzed: any AnalyzedExpr
		public let startToken: Token
		public let endToken: Token
	}

	case string(String, Token)
	case expr(AnalyzedInterpolatedExpr)

	var asString: String? {
		if case let .string(string, _) = self {
			return string
		}

		return nil
	}

	var asExpr: AnalyzedInterpolatedExpr? {
		if case let .expr(analyzedInterpolatedExpr) = self {
			return analyzedInterpolatedExpr
		}

		return nil
	}

	public var description: String {
		switch self {
		case .string(let string, _):
			"string(\(string))"
		case .expr(let interpolatedExpr):
			"expr(\(interpolatedExpr))"
		}
	}
}

public struct AnalyzedInterpolatedStringExpr: InterpolatedStringExpr, AnalyzedExpr {
  public let wrapped: InterpolatedStringExprSyntax
	public var segmentsAnalyzed: [AnalyzedInterpolatedStringSegment]

	public var inferenceType: InferenceType
	public var environment: Environment
	public var analyzedChildren: [any AnalyzedSyntax] {
		segmentsAnalyzed.compactMap {
			if case let .expr(expr) = $0 {
				return expr.exprAnalyzed
			} else {
				return nil
			}
		}
	}

	// Delegate these to the wrapped node
	public var location: SourceLocation { wrapped.location }
	public var children: [any Syntax] { wrapped.children }

	public func accept<V>(_ visitor: V, _ scope: V.Context) throws -> V.Value where V: AnalyzedVisitor {
		try visitor.visit(self, scope)
	}

	public func accept<V: Visitor>(_ visitor: V, _ context: V.Context) throws -> V.Value {
		try visitor.visit(wrapped, context)
	}
}
