// Generated by Dev/generate-type.rb 09/12/2024 20:43

public enum InterpolatedStringSegment: Equatable, CustomStringConvertible {
	public struct InterpolatedExpr: Equatable {
		public static func ==(lhs: Self, rhs: Self) -> Bool {
			lhs.expr.id == rhs.expr.id
		}

		public let expr: any Expr
		public let startToken: Token
		public let endToken: Token
	}

	case string(String, Token)
	case expr(InterpolatedExpr)

	public var description: String {
		switch self {
		case .string(let string, _):
			"string(\(string))"
		case .expr(let interpolatedExpr):
			"expr(\(interpolatedExpr))"
		}
	}
}

public protocol InterpolatedStringExpr: Expr {
	// Insert InterpolatedStringExpr specific fields here
}

public struct InterpolatedStringExprSyntax: InterpolatedStringExpr {
	public var segments: [InterpolatedStringSegment]

  // A unique identifier
  public var id: SyntaxID

	// Where does this syntax live
	public var location: SourceLocation

	// Useful for just traversing the whole tree
	public var children: [any Syntax] {
		segments.compactMap {
			if case let .expr(expr) = $0 {
				return expr.expr
			} else {
				return nil
			}
		}
	}

	// Let this node be visited by visitors
	public func accept<V: Visitor>(_ visitor: V, _ context: V.Context) throws -> V.Value {
		try visitor.visit(self, context)
	}
}
