struct ArrayIterator<Element> {
	var current: int
	var array: Array<Element>

	init(array: Array<Element>) {
		self.current = 0
		self.array = array
	}

	func next() -> Element {
		if self.current < self.array.count {
			let value = self.array[self.current]
			self.current = self.current + 1
			return Optional<Element>.some(value)
		} else {
			return Optional<Element>.none
		}
	}
}

struct Array<Element> {
	var _storage: pointer
	var count: int
	var capacity: int

	init() {
		self.count = 0
		self.capacity = 4
		self._storage = _allocate(4)
	}

	func makeIterator() -> ArrayIterator<Element> {
		ArrayIterator(array: self)
	}

	func get(index: int) -> Element {
		return _deref(self._storage + index)
	}

	func set(index: int,value: Element) {
		_storePtr(self._storage + index, value)
	}

	func resize() {
		var newCapacity = self.capacity * 2
		var newStorage = _allocate(newCapacity)

		var i = 0
		while i < self.count {
			_storePtr(newStorage + i, self[i])
			i = i + 1
		}

		_free(self._storage)

		self._storage = newStorage
		self.capacity = newCapacity
	}

	func append(item) {
		if self.count + 1 > self.capacity {
			self.resize()
		}

		_storePtr(self._storage + self.count, item)
		self.count = self.count + 1
	}

	func test() {
		if self.count + 1 > self.capacity {
			self.resize()
		}

		_storePtr(self._storage + self.count, self[self.count - 1])
		self.count = self.count + 1
	}
}
