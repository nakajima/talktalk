name: Build a prerelease

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: khlopko/setup-swift@bfd61cbd14eeef55a27afc45138b61ced7174839
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          swift-version: "main-snapshot"
      - uses: actions/checkout@v4
      - name: Install gon
        run: brew install Bearer/tap/gon
      - name: Write version file
        run: |
          echo 'let TalkTalkVersion = "${{ github.sha }}"' > Sources/talk/Version.swift
      - name: Build for release
        run: Dev/build
      - name: Install the Apple certificate
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
           CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
           KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

           # import certificate and provisioning profile from secrets
           echo -n "$P12_BASE64" | base64 --decode -o $CERTIFICATE_PATH

           # create temporary keychain
           security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
           security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
           security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

           # import certificate to keychain
           security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
           security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
           security list-keychain -d user -s $KEYCHAIN_PATH
      - name: Sign
        env:
          GON_HCL: ${{ secrets.GON_HCL }}
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
          AC_PROVIDER: ${{ secrets.AC_PROVIDER }}
          AC_APPLICATION_IDENTITY: ${{ secrets.AC_APPLICATION_IDENTITY }}
        run: |
          gon Dev/gon.hcl
      - name: Zip up release
        run: Dev/release

      - name: Get next tag name
        id: get_next_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          next_tag=$(echo $latest_tag | awk -F. -v OFS=. '{$NF++;print}')
          short_sha=$(echo "${GITHUB_SHA}" | cut -c1-7)
          echo "::set-output name=next_tag::$next_tag"
          echo "::set-output name=short_sha::$short_sha"

      - name: Create Pre-Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ steps.get_next_tag.outputs.next_tag }}-rc${{ steps.get_next_tag.outputs.short_sha }}"
          release_name: "${{ steps.get_next_tag.outputs.next_tag }}-rc${{ steps.get_next_tag.outputs.short_sha }}"
          body: |
            Automated pre-release v${{ steps.get_next_tag.outputs.next_tag }}-rc${{ steps.get_next_tag.outputs.short_sha }}
          draft: false
          prerelease: true

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./TalkTalk_macos_arm64.zip
          asset_name: TalkTalk_macos_arm64.zip
          asset_content_type: application/zip

      - name: Save upload url for the wasm build
        run: echo "${{ steps.create_release.outputs.upload_url }}" > upload_url.txt

      - name: Get the swift wasm toolchain
        run: |
          curl -L -o package.pkg https://github.com/swiftwasm/swift/releases/download/swift-wasm-DEVELOPMENT-SNAPSHOT-2024-09-20-a/swift-wasm-DEVELOPMENT-SNAPSHOT-2024-09-20-a-macos_arm64.pkg
          sudo installer -pkg package.pkg -target /

      - name: Get the wasm tools
        run: brew install wabt binaryen

      - name: Build the wasm file
        run: make talk.wasm.gzip

      - name: Upload Wasm Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./talk.wasm.gzip
          asset_name: TalkTalk_wasm.gzip
          asset_content_type: application/gzip
