name: Build a release

on:
  push:
    tags:
      - "*"

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: macos-latest
    steps:
    - uses: khlopko/setup-swift@bfd61cbd14eeef55a27afc45138b61ced7174839
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        swift-version: "main-snapshot"
    - uses: actions/checkout@v4
    # - name: Install gon
    #   run: brew install Bearer/tap/gon
    # - name: Write version file
    #   run: |
    #        echo 'let TalkTalkVersion = "${{ github.ref_name }}"' > Sources/talk/Version.swift
    # - name: Build for release
    #   run: Dev/build
    # - name: Install the Apple certificate
    #   env:
    #     P12_BASE64: ${{ secrets.P12_BASE64 }}
    #     P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
    #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    #   run: |
    #    # create variables
    #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
    #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

    #     # import certificate and provisioning profile from secrets
    #     echo -n "$P12_BASE64" | base64 --decode -o $CERTIFICATE_PATH

    #     # create temporary keychain
    #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
    #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
    #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

    #     # import certificate to keychain
    #     security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
    #     security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
    #     security list-keychain -d user -s $KEYCHAIN_PATH
    # - name: Sign
    #   env:
    #     GON_HCL: ${{ secrets.GON_HCL }}
    #     AC_USERNAME: ${{ secrets.AC_USERNAME }}
    #     AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
    #     AC_PROVIDER: ${{ secrets.AC_PROVIDER }}
    #     AC_APPLICATION_IDENTITY: ${{ secrets.AC_APPLICATION_IDENTITY }}
    #   run: |
    #     gon Dev/gon.hcl
    # - name: Zip up release
    #   run: Dev/release
    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: v${{ github.ref }}
    #     body: |
    #       Automated release v${{ github.ref_name }}
    #     draft: false
    #     prerelease: false
    # - name: Upload Release Asset
    #   id: upload-release-asset
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
    #     asset_path: ./TalkTalk_macos_arm64.zip
    #     asset_name: TalkTalk_macos_arm64.zip
    #     asset_content_type: application/zip
    # - name: Save upload url for the wasm build
    #   run: echo "${{ steps.create_release.outputs.upload_url }}" > upload_url.txt
    - name: Get the swift wasm toolchain
      run: |
        curl -L -o package.pkg https://github.com/swiftwasm/swift/releases/download/swift-wasm-DEVELOPMENT-SNAPSHOT-2024-09-20-a/swift-wasm-DEVELOPMENT-SNAPSHOT-2024-09-20-a-macos_arm64.pkg
        sudo installer -pkg package.pkg -target /Library/Developer/Toolchains/
    - name: Get the wasm tools
      run: brew install wabt binaryen
    - name: "Debug some stuff"
      run: |
        echo "We expect to see a toolchain here?"
        ls -lah /Library/Developer/Toolchains/
    - name: Build the wasm file
      run: make talk.wasm.gzip
    # - name: Upload Release Asset
    #   id: upload-wasm-asset
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./talk.wasm.gzip
    #     asset_name: TalkTalk_wasm.gzip
    #     asset_content_type: application/gzip